generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  name         String
  role         Role          @default(PATIENT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  patients     Patient[]
  speciality   String?       // Para odontólogos
  license      String?       // Para odontólogos
  phone        String?       // Para asistentes
  isActive     Boolean       @default(true)
  schedules    DentistSchedule[]
}

model Patient {
  id             String          @id @default(uuid())
  name           String
  lastNamePaterno String?
  lastNameMaterno String?
  email          String?
  phone          String?
  birthDate      DateTime?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  appointments   Appointment[]
  consultations  Consultation[]
  medicalHistory MedicalHistory?
  odontogram     odontogram?
  user           User            @relation(fields: [userId], references: [id])
  payments       Payment[]
}

model MedicalHistory {
  id                        String   @id @default(uuid())
  patientId                 String   @unique
  notes                     String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  alergias                  String?
  antecedentesNoPatologicos String?
  antecedentesPatologicos   String?
  consentimiento            String?
  diagnostico               String?
  enfermedades              String?
  exploracionBucal          String?
  exploracionFisica         String?
  interrogatorio            String?
  medicamentos              String?
  motivo                    String?
  padecimientoActual        String?
  planTratamiento           String?
  pronostico                String?
  patient                   Patient  @relation(fields: [patientId], references: [id])
}

model Appointment {
  id        String            @id @default(uuid())
  patientId String
  userId    String
  date      DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  patient   Patient           @relation(fields: [patientId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
}

model Payment {
  id          String        @id @default(uuid())
  patientId   String
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  patient     Patient       @relation(fields: [patientId], references: [id])
}

model Consultation {
  id            String   @id @default(uuid())
  patientId     String
  date          DateTime @default(now())
  motivo        String?
  diagnostico   String?
  tratamiento   String?
  observaciones String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  patient       Patient  @relation(fields: [patientId], references: [id])
}

model odontogram {
  id           String   @id @default(uuid())
  patientId    String   @unique
  patient      Patient  @relation(fields: [patientId], references: [id])
  data         Json     // Estados de los dientes
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model DentistSchedule {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  workingDays  Json     // Ejemplo: [1,2,3,4,5]
  startTime    String   // Ejemplo: '08:00'
  endTime      String   // Ejemplo: '20:00'
  blockedHours Json     // Ejemplo: [{ day: 1, start: '13:00', end: '15:00' }]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
  DENTIST
  ASSISTANT
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}
