generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  email        String            @unique
  password     String
  name         String
  lastNamePaterno String?
  lastNameMaterno String?
  role         Role              @default(PATIENT)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  appointments Appointment[]
  patient      Patient?
  speciality   String? // Para odontólogos
  license      String? // Para odontólogos
  phone        String? // Para asistentes
  isActive     Boolean           @default(true)
  schedules    DentistSchedule[]
  dentistPayments DentistPayment[]
  permissions  UserPermission[]  // Relación con permisos
}

model Patient {
  id              String          @id @default(uuid())
  name            String
  lastNamePaterno String?
  lastNameMaterno String?
  email           String?
  phone           String?
  birthDate       DateTime?
  address         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String?         @unique
  appointments    Appointment[]
  consultations   Consultation[]
  medicalHistory  MedicalHistory?
  odontogram      odontogram?
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]
}

model MedicalHistory {
  id                        String   @id @default(uuid())
  patientId                 String   @unique
  patient                   Patient  @relation(fields: [patientId], references: [id])
  notes                     String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  // Datos generales
  nombreCompleto            String?
  apellidoPaterno           String?
  apellidoMaterno           String?
  empleoProfesion           String?
  sexo                      String?
  edad                      Int?
  estadoCivil               String?
  fechaNacimiento           DateTime?
  lugarNacimiento           String?
  domicilio                 String?
  telefonoDomicilio         String?
  telefonoOficina           String?
  escolaridad               String?
  ocupacion                 String?
  interrogatorioTipo        String? // directo/indirecto
  nombreInformante          String?
  parentescoInformante      String?
  respuesta                 String?
  temperatura               String?
  presionArterial           String?
  frecuenciaCardiaca        String?
  // Antecedentes preliminares
  urgencia                  String?
  compania                  String?
  motivoConsulta            String?
  fechaUltimaConsultaMedica DateTime?
  motivoUltimaConsultaMedica String?
  padecimientoOdontologicoActual String?
  tipoSanguineo             String?
  rh                        String?
  hepatitisA                Boolean?
  hepatitisB                Boolean?
  hepatitisC                Boolean?
  hepatitisD                Boolean?
  vih                       Boolean?
  herpes                    Boolean?
  alergias                  String?
  terapeuticaEmpleada       String?
  saludGeneral              String?
  nerviosismoDental         Boolean?
  convulsiones              Boolean?
  // Antecedentes médicos
  asma                      Boolean?
  bronquitis                Boolean?
  enfisema                  Boolean?
  fuma                      Boolean?
  cigarrillosPorDia         Int?
  taquicardia               Boolean?
  bradicardia               Boolean?
  hipertension              Boolean?
  hipotension               Boolean?
  doloresPecho              Boolean?
  infarto                   Boolean?
  angina                    Boolean?
  fiebreReumatica           Boolean?
  edadFiebreReumatica       Int?
  sangrado                  String?
  extracciones              Boolean?
  sangradoNasal             Boolean?
  cortaduras                Boolean?
  periodoMenstrual          String?
  fum                       DateTime?
  embarazo                  Boolean?
  mesesEmbarazo             Int?
  padecimientosGastricos    String?
  diabetes                  Boolean?
  diabetesControlMedico     Boolean?
  hipotiroidismo            Boolean?
  hipertiroidismo           Boolean?
  hepatitisHigado           Boolean?
  cirrosis                  Boolean?
  problemasRinonUrinarias   Boolean?
  medicamentosActuales      String?
  otrasCondicionesMedicas   String?
  procesosQuirurgicos       String?
  tratamientosHormonales    String?
}

model Appointment {
  id        String            @id @default(uuid())
  patientId String
  userId    String
  date      DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  patient   Patient           @relation(fields: [patientId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
  duration  Int? // Duración en minutos
  endDate   DateTime? // Hora de fin de la cita
  serviceId String?
  service   Service?          @relation(fields: [serviceId], references: [id])
}

model Payment {
  id          String        @id @default(uuid())
  patientId   String
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  patient     Patient       @relation(fields: [patientId], references: [id])
}

model Consultation {
  id            String   @id @default(uuid())
  patientId     String
  date          DateTime @default(now())
  motivo        String?
  diagnostico   String?
  tratamiento   String?
  observaciones String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  patient       Patient  @relation(fields: [patientId], references: [id])
}

model odontogram {
  id        String   @id @default(uuid())
  patientId String   @unique
  patient   Patient  @relation(fields: [patientId], references: [id])
  data      Json // Estados de los dientes
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model DentistSchedule {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  workingDays  Json // Ejemplo: [1,2,3,4,5]
  startTime    String // Ejemplo: '08:00'
  endTime      String // Ejemplo: '20:00'
  blockedHours Json // Ejemplo: [{ day: 1, start: '13:00', end: '15:00' }]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ClinicConfig {
  id             String   @id @default(uuid())
  nombreClinica  String
  telefono       String
  direccion      String
  correo         String
  horario        String
  colorPrincipal String
  logoUrl        String?
  updatedAt      DateTime @updatedAt
}

model Service {
  id                String   @id @default(uuid())
  name              String
  type              String
  duration          Int
  price             Float
  description       String
  color             String?   // Color personalizado para el servicio
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  appointments      Appointment[]
}

model DentistPayment {
  id           String   @id @default(uuid())
  dentistId    String
  dentist      User     @relation(fields: [dentistId], references: [id])
  period       String
  baseSalary   Float
  commission   Float
  deductions   Float
  total        Float
  status       String   // 'pending', 'paid', 'cancelled'
  paymentDate  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Permission {
  id          String   @id
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       UserPermission[]
}

model UserPermission {
  id           String     @id @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

enum Role {
  ADMIN
  DENTIST
  ASSISTANT
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}
